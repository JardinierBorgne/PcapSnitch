'''
PcapSnitch - Application de traitement de fichiers PCAP
Par Nathan BO√ãL - MSI1
'''

# Importation des modules n√©cessaires
from pcap_loader.loader import PcapLoader  # Chargement des fichiers PCAP
from filters.protocol_filter import ProtocolFilter  # Filtrage des paquets par protocole
from statistics.packet_counter import PacketCounter  # Comptage des paquets par couche OSI
from statistics.protocol_stats import ProtocolStats  # Statistiques des protocoles
from statistics.top_talkers import TopTalkers  # Identification des principaux √©metteurs
from statistics.time_series import TimeSeriesBuilder  # Construction de s√©ries temporelles
from statistics.anomaly_detector import AnomalyDetector  # D√©tection d'anomalies
from reporters.graph_generator import GraphGenerator  # G√©n√©ration de graphiques
from reporters.pdf_report import PDFReport  # G√©n√©ration de rapports PDF
from utils.helpers import save_csv  # Sauvegarde des donn√©es au format CSV

# Importation de Scapy pour la capture r√©seau
from scapy.all import sniff, wrpcap
from scapy.arch.windows import get_windows_if_list
import sys
import time
import os  # Import pour g√©rer les chemins

# D√©finir le dossier de sortie pour les fichiers g√©n√©r√©s
DATA_DIR = "data"
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)  # Cr√©e le dossier s'il n'existe pas

# Fonction pour capturer le trafic r√©seau en direct
def live_capture():
    print("\n[üì°] Interfaces disponibles :")
    interfaces = get_windows_if_list()  # Liste des interfaces r√©seau disponibles
    for i, iface in enumerate(interfaces):
        name = iface.get('name', 'Inconnu')  # Nom de l'interface
        description = iface.get('description', '')  # Description de l'interface
        print(f"{i}. {name} - {description}")

    # S√©lection de l'interface r√©seau
    try:
        idx = int(input("Choisissez une interface √† √©couter : "))
        iface = interfaces[idx]['name']
    except (IndexError, ValueError):
        print("[!] Choix invalide.")
        return

    # Dur√©e de la capture
    try:
        duration = int(input("Dur√©e de capture (en secondes, 0 pour illimit√© + Ctrl+C) : "))
    except ValueError:
        duration = 0

    print(f"[‚ñ∂Ô∏è] Capture en cours sur : {iface} ({'illimit√©e' if duration == 0 else str(duration)+'s'})")
    try:
        # Capture des paquets
        if duration > 0:
            packets = sniff(iface=iface, timeout=duration, store=True)
        else:
            packets = sniff(iface=iface, store=True)
    except KeyboardInterrupt:
        print("\n[‚èπÔ∏è] Capture stopp√©e par l'utilisateur.")
        packets = packets if 'packets' in locals() else []

    # Sauvegarde des paquets captur√©s
    if packets:
        filename = os.path.join(DATA_DIR, f"capture_{int(time.time())}.pcap")
        wrpcap(filename, packets)
        print(f"[‚úì] {len(packets)} paquets captur√©s et sauvegard√©s dans {filename}.")
    else:
        print("[!] Aucune donn√©e captur√©e.")

# Fonction principale du menu
def menu():
    packets = None  # Liste des paquets charg√©s
    loader = None  # Instance du chargeur PCAP
    pcap_path = ""  # Chemin du fichier PCAP

    while True:
        # Affichage du menu principal
        print("\n===== MENU ANALYSE R√âSEAU =====")
        print("1. Charger un fichier PCAP")
        print("2. Filtrer par protocole")
        print("3. Effectuer l‚Äôanalyse statistique")
        print("4. G√©n√©rer le rapport PDF")
        print("5. Exporter les statistiques en CSV")
        print("6. Lancer une capture en direct")
        print("7. Quitter")
        choice = input("Choix : ")

        if choice == "1":
            # Chargement d'un fichier PCAP
            pcap_path = input("Chemin du fichier .pcap : ")
            try:
                loader = PcapLoader(pcap_path)
                loader.load()
                packets = loader.get_packets()
            except Exception as e:
                print(f"Erreur : {e}")

        elif choice == "2":
            # Filtrage des paquets par protocole
            if not packets:
                print("Veuillez charger un fichier PCAP d'abord.")
                continue
            proto = input("Protocole √† filtrer (TCP, UDP, ICMP, DNS, ARP, HTTP) : ")
            filtered = ProtocolFilter(packets).filter_by_protocol(proto)
            print(f"{len(filtered)} paquets {proto.upper()} trouv√©s.")

        elif choice == "3":
            # Analyse statistique des paquets
            if not packets:
                print("Veuillez charger un fichier PCAP d'abord.")
                continue
            print("\n[Analyse statistique en cours...]")
            osi_stats = PacketCounter(packets).count_by_osi_layer()  # Comptage par couche OSI
            protocol_counts = ProtocolStats(packets).count_protocols()  # Comptage des protocoles
            talkers = TopTalkers(packets).get_top_senders()  # Principaux √©metteurs
            series = TimeSeriesBuilder(packets).build_series()  # S√©ries temporelles
            # G√©n√©ration des graphiques
            GraphGenerator.plot_top_protocols(protocol_counts, os.path.join(DATA_DIR, "protocols.png"))
            GraphGenerator.plot_top_talkers(talkers, os.path.join(DATA_DIR, "talkers.png"))
            GraphGenerator.plot_time_series(series, os.path.join(DATA_DIR, "timeline.png"))
            print("[‚úì] Analyse et graphiques g√©n√©r√©s.")

        elif choice == "4":
            # G√©n√©ration d'un rapport PDF
            if not packets:
                print("Veuillez charger un fichier PCAP d'abord.")
                continue
            osi_stats = PacketCounter(packets).count_by_osi_layer()
            protocol_counts = ProtocolStats(packets).count_protocols()
            talkers = TopTalkers(packets).get_top_senders()
            series = TimeSeriesBuilder(packets).build_series()
            
            # D√©tection des anomalies
            anomalies = AnomalyDetector(series).detect_peaks() + AnomalyDetector(series).detect_rare_ports(packets)
            
            # Suppression des doublons dans les anomalies
            unique_anomalies = list(set(anomalies))  # Utilisation de set pour d√©dupliquer

            pdf = PDFReport()
            pdf.add_cover_page()  # Ajout de la page de garde
            pdf.add_intro(pcap_path, len(packets))  # Introduction
            pdf.add_osi_table(osi_stats)  # Tableau des couches OSI
            pdf.add_protocol_table(protocol_counts)  # Tableau des protocoles
            pdf.add_image_section("Protocoles les plus utilis√©s", os.path.join(DATA_DIR, "protocols.png"))  # Graphique des protocoles
            pdf.add_image_section("Top Talkers", os.path.join(DATA_DIR, "talkers.png"))  # Graphique des √©metteurs
            pdf.add_image_section("S√©rie temporelle du trafic r√©seau", os.path.join(DATA_DIR, "timeline.png"))  # Graphique temporel
            pdf.add_anomalies(unique_anomalies)  # Anomalies d√©dupliqu√©es
            pdf.export(os.path.join(DATA_DIR, "rapport_analyse.pdf"))  # Export du rapport PDF

        elif choice == "5":
            # Export des statistiques en CSV
            if not packets:
                print("Veuillez charger un fichier PCAP d'abord.")
                continue
            protocol_counts = ProtocolStats(packets).count_protocols()
            talkers = TopTalkers(packets).get_top_senders()
            series = TimeSeriesBuilder(packets).build_series()
            print("[üìÅ] Export des donn√©es...")
            # Sauvegarde des statistiques
            save_csv(protocol_counts.items(), os.path.join(DATA_DIR, "protocol_stats.csv"), headers=["Protocole", "Nb Paquets"])
            save_csv(talkers, os.path.join(DATA_DIR, "top_talkers.csv"), headers=["Adresse IP", "Nb Paquets"])
            ts_rows = []
            for ts, protos in series.items():
                row = [ts] + [protos.get(p, 0) for p in ["IP", "TCP", "UDP", "ICMP", "DNS", "ARP", "HTTP"]]
                ts_rows.append(row)
            save_csv(ts_rows, os.path.join(DATA_DIR, "time_series.csv"), headers=["Timestamp", "IP", "TCP", "UDP", "ICMP", "DNS", "ARP", "HTTP"])
            print("[‚úì] Fichiers CSV g√©n√©r√©s dans le dossier /data/")

        elif choice == "6":
            # Lancement d'une capture r√©seau en direct
            live_capture()

        elif choice == "7":
            # Quitter l'application
            print("Fermeture de l'application. √Ä bient√¥t !")
            sys.exit()

        else:
            # Option invalide
            print("Option invalide. Veuillez r√©essayer.")

# Point d'entr√©e principal
if __name__ == "__main__":
    menu()